#
# An initial setup based on the below blog post:
# https://code.parts/2020/06/21/kafka-docker-compose-yml/
#

version: 3.8'
services:

  #
  # Manages Kafka clustering
  #
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.8
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  #
  # The main Kafka system
  #
  kafka:
    image: confluentinc/cp-server:5.5.8
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://kafka:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 5s
      timeout: 10s
      retries: 10

  #
  # Manages Kafka schemas for event messages
  #
  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.8
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'

  #
  # Wait for Kafka to come up and create topics
  # https://code.parts/2020/06/21/kafka-docker-compose-yml/
  #
  create-topics:
    image: confluentinc/cp-kafka:5.5.8
    hostname: create-topics
    container_name: create-topics
    command: "
      bash -c 'cub kafka-ready -b kafka:9092 1 120 && \
               kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 2 --replication-factor 1 --topic OrderCreated &&
               kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 2 --replication-factor 1 --topic OrderProcessed'"
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  #
  # The Curity Identity Server
  #
  curity-idsvr:
    image: curity.azurecr.io/curity/idsvr:7.0
    ports:
     - 6749:6749
     - 8443:8443
    volumes:
     #- ./license.json:/opt/idsvr/etc/init/license/license.json
     #- ./config-backup.xml:/opt/idsvr/etc/init/config.xml
     - ./idsvr/log4j2.xml:/opt/idsvr/etc/log4j2.xml
    environment:
      PASSWORD: 'Password1'
    profiles:
     - NONE

  #
  # The entry point API that saves to Kafka
  #
  sales-api:
    image: sales-api:1.0.0
    hostname: salesapi
    ports:
      - 3001:3001
    depends_on:
      kafka:
        condition: service_healthy
    profiles:
     - DEPLOYED
    
  #
  # The orders API which both consumes and produces events
  #
  orders-api:
    image: orders-api:1.0.0
    hostname: ordersapi
    ports:
      - 3002:3002
    depends_on:
      kafka:
        condition: service_healthy
    profiles:
     - DEPLOYED

  #
  # The invoicing API which consumes events
  #
  invoicing-api:
    image: invoicing-api:1.0.0
    hostname: invoicingapi
    ports:
      - 3003:3003
    depends_on:
      kafka:
        condition: service_healthy
    profiles:
     - DEPLOYED

  #
  # The shipping API which consumes events
  #
  shipping_api:
    image: shipping-api:1.0.0
    hostname: shippingapi
    ports:
      - 3004:3004
    depends_on:
      kafka:
        condition: service_healthy
    profiles:
     - DEPLOYED

  #
  # Also deploy a container with networking tools, for troubleshooting
  #
  util:
    image: wbitt/network-multitool
    hostname: multitool
