#
# An initial setup based on the below blog post:
# https://code.parts/2020/06/21/kafka-docker-compose-yml/
#

version: 3.8'
services:

#
  # The Curity Identity Server
  #
  curity-idsvr:
    image: curity.azurecr.io/curity/idsvr:7.2.0
    hostname: curityserver
    ports:
     - 6749:6749
     - 8443:8443
    volumes:
     - ./idsvr/license.json:/opt/idsvr/etc/init/license/license.json
     - ./idsvr/config-backup.xml:/opt/idsvr/etc/init/config.xml
     - ./idsvr/log4j2.xml:/opt/idsvr/etc/log4j2.xml
    environment:
      PASSWORD: 'Password1'
      LOGGING_LEVEL: 'DEBUG'

  #
  # A SQL database used by the Curity Identity Server
  #
  curity-data:
    image: postgres:13.2
    hostname: dbserver
    ports:
     - 5432:5432
    volumes:
      - ./idsvr/data:/var/lib/postgresql/data
      - ./idsvr/data-backup.sql:/docker-entrypoint-initdb.d/data-backup.sql
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'Password1'
      POSTGRES_DB: 'idsvr'

  #
  # Manages Kafka clustering
  #
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.8
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "22181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  #
  # The main Kafka system
  #
  kafka:
    image: confluentinc/cp-server:5.5.8
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://kafka:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 5s
      timeout: 10s
      retries: 10

  #
  # Manages Kafka schemas for event messages
  #
  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.8
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'

  #
  # Wait for Kafka to come up and create topics
  # https://code.parts/2020/06/21/kafka-docker-compose-yml/
  #
  create-topics:
    image: confluentinc/cp-kafka:5.5.8
    hostname: create-topics
    container_name: create-topics
    command: "
      bash -c 'cub kafka-ready -b kafka:9092 1 120 && \
               kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 2 --replication-factor 1 --topic OrderCreated'"
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  #
  # The orders API, which publishes events with a verifiable JWT identity
  #
  orders-api:
    image: orders-api:1.0.0
    hostname: ordersapi
    ports:
      - 3001:3001
    depends_on:
      kafka:
        condition: service_healthy
    profiles:
     - DEPLOYED
    
  #
  # The payments API, which consumes events with a verifiable JWT identity
  #
  payments-api:
    image: payments-api:1.0.0
    hostname: paymentsapi
    ports:
      - 3002:3002
    depends_on:
      kafka:
        condition: service_healthy
    profiles:
     - DEPLOYED

  #
  # Also deploy a container with networking tools, for troubleshooting
  #
  util:
    image: wbitt/network-multitool
    hostname: multitool
